#tomcat Port
server.port=8091

#Oracle connect
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=kong
spring.datasource.password=kong

#View Page path 
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

#MyBatis
mybatis.config-location=classpath:mybatis-config.xml
mybatis.mapper-locations=classpath:com/golforyou/mappers/**/*.xml

#security
spring.profiles.include=oauth

spring.mvc.converters.preferred-json-mapper=gson

#jpa-hibernate #setting change
spring.jpa.hibernate.ddl-auto= update
#create Hibernate first drops existing tables, then creates new tables
#update the object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no more required by the application
#create-drop similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing
#validate Hibernate only validates whether the tables and columns exist, otherwise it throws an exception
#none this value effectively turns off the DDL generation


spring.jpa.show-sql=true
spring.jpa.database=oracle
#spring.jpa.database-platform=org.hibernate.dialect.Oracle11gDialect


#spring.servlet.multipart.maxFileSize=30MB
#spring.servlet.multipart.maxRequestSize=30MB

logging.level.org.springframework.security.web=debug
#logging.level.org.young.security=debug

spring.servlet.multipart.enabled=false
#logging.level.org.apache.coyote.http11=debug

spring.main.allow-circular-references=true